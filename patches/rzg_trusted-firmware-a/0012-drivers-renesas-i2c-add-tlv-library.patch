From 2a0acc04eb9036a9fd84f99fdafceb20f1b84bb5 Mon Sep 17 00:00:00 2001
From: Josua Mayer <josua@solid-run.com>
Date: Wed, 22 May 2024 19:39:12 +0200
Subject: [PATCH 12/12] drivers: renesas: i2c: add tlv library

Add functions for reading tlv data from i2c eeprom.

Signed-off-by: Josua Mayer <josua@solid-run.com>
---
 plat/renesas/rz/common/drivers/riic_tlv.c | 314 ++++++++++++++++++++++
 plat/renesas/rz/common/include/riic_tlv.h |  22 ++
 2 files changed, 336 insertions(+)
 create mode 100644 plat/renesas/rz/common/drivers/riic_tlv.c
 create mode 100644 plat/renesas/rz/common/include/riic_tlv.h

diff --git a/plat/renesas/rz/common/drivers/riic_tlv.c b/plat/renesas/rz/common/drivers/riic_tlv.c
new file mode 100644
index 000000000..3646b6a23
--- /dev/null
+++ b/plat/renesas/rz/common/drivers/riic_tlv.c
@@ -0,0 +1,314 @@
+// SPDX-License-Identifier: BSD-4-Clause
+/*
+ * Copyright 2023 SolidRun ltd. All rights reserved.
+ * Author: Alvaro Karsz (alvaro.karsz@solid-run.com)
+ * Copyright 2024 Josua Mayer <josua@solid-run.com>
+ */
+
+#include <stdbool.h>
+#include <stdint.h>
+#include <stdio.h>
+#include <string.h>
+
+#include <riic.h>
+#include <riic_tlv.h>
+
+struct tlv_hdr {
+	/* TLV signature */
+	char sig[8];
+	/* Version */
+	uint8_t ver;
+	/* Total length */
+	uint16_t len;
+} __attribute__((packed));
+
+struct tlv_field {
+	uint8_t type;
+	uint8_t len;
+	uint8_t *val;
+} __attribute__((packed));
+
+#define TLV_MAX_LEN	 256
+static uint8_t eeprom[TLV_MAX_LEN];
+
+#define GET_TLV_HDR()		((struct tlv_hdr *)eeprom)
+#define GET_TLV_LEN()		__builtin_bswap16(GET_TLV_HDR()->len)
+#define GET_TLV_FIELD(off)	   ((struct tlv_field *)((uint64_t)eeprom + (off)))
+#define GET_TLV_DATA(off, len, buf)  (memcpy((buf), (void *)((uint64_t)eeprom + (off)), (len)))
+
+static uint32_t tlv_calc_crc32(uint8_t *buf, uint16_t len)
+{
+	int i, j;
+	uint32_t byte, crc, mask;
+
+	i = 0;
+	crc = 0xFFFFFFFF;
+	while (len--) {
+		byte = buf[i];
+		crc = crc ^ byte;
+		for (j = 7; j >= 0; j--) {
+			mask = -(crc & 1);
+			crc = (crc >> 1) ^ (0xEDB88320 & mask);
+		}
+		i = i + 1;
+	}
+	return ~crc;
+}
+
+uint16_t riic_tlv_find(uint8_t code, uint8_t *output, uint16_t *offset_out)
+{
+	struct tlv_field *field;
+	__unused struct tlv_hdr *hdr;
+	uint16_t tot_len, offset;
+
+	hdr = GET_TLV_HDR();
+	offset = sizeof(struct tlv_hdr);
+	tot_len = GET_TLV_LEN() + offset;
+
+	/* Search for code */
+	for (;;) {
+		/* Get next field, read only the code and length */
+		field = GET_TLV_FIELD(offset);
+
+		/* Is this the code we are looking for? if so, load data and return status */
+		if (field->type == code) {
+			if (output)
+				GET_TLV_DATA(offset + 2, field->len, output);
+			if (offset_out)
+				*offset_out = offset;
+
+			return field->len;
+		}
+
+		/* Move offset */
+		offset += 2 + field->len;
+
+		/* Have we reached to the last value? (CRC)
+		 * If so, the value was not found..
+		 */
+		if (field->type == TLV_CODE_CRC_32)
+			return 0;
+
+		/* Sanity check - data not found*/
+		if (offset >= tot_len)
+			return 0;
+	}
+}
+
+static bool tlv_verify_crc32(void)
+{
+	uint32_t crc_calc, crc_val;
+
+	crc_calc = tlv_calc_crc32(eeprom, GET_TLV_LEN() + sizeof(struct tlv_hdr) - 4);//Don't CRC the CRC itself :)
+
+	/* Now find the CRC value in the EEPROM */
+	if (!riic_tlv_find(TLV_CODE_CRC_32, (uint8_t *)&crc_val, NULL)) {
+		printf("No CRC32 value found in TLV..\n");
+		return false;
+	}
+
+	return __builtin_bswap32(crc_val) == crc_calc;
+}
+
+static bool is_valid_tlvhdr(struct tlv_hdr *hdr)
+{
+	return strcmp(hdr->sig, "TlvInfo") == 0 &&
+		      __builtin_bswap16(hdr->len) <= (TLV_MAX_LEN - sizeof(struct tlv_hdr));
+}
+
+bool riic_tlv_read_eeprom(uint8_t chip, uint8_t offset)
+{
+	struct tlv_hdr *hdr;
+	uint8_t *buf_ptr = eeprom;
+	int ret = true;
+
+	/* Load tlv header */
+	ret = riic_read(chip, offset, buf_ptr, sizeof(struct tlv_hdr));
+	if (ret < 0) {
+		printf("Can't read EEPROM..\n");
+		goto close;
+	}
+
+	buf_ptr += sizeof(struct tlv_hdr);
+	hdr = GET_TLV_HDR();
+
+	/* Validate TLV header */
+	if (!is_valid_tlvhdr(hdr)) {
+		ret = -1;
+		printf("Invalid TLV header read from EEPROM!\n");
+		goto close;
+	}
+
+	/* Read entire TLV data */
+	ret = riic_read(chip, offset + sizeof(struct tlv_hdr), buf_ptr, GET_TLV_LEN());
+	if (ret < 0) {
+		printf("Can't read EEPROM..\n");
+		goto close;
+	}
+
+	/* Verify TLV CRC */
+	if (!tlv_verify_crc32()) {
+		ret = -1;
+		printf("Invalid TLV-CRC32 value in EEPROM!\n");
+		goto close;
+	}
+
+close:
+	return ret == 0;
+}
+
+static void print_type_name(uint8_t type)
+{
+	switch (type) {
+	case TLV_CODE_MAC_BASE:
+		printf("\tMAC Address base: ");
+		break;
+	case TLV_CODE_PRODUCT_NAME:
+		printf("\tProduct Name: ");
+		break;
+	case TLV_CODE_PART_NUMBER:
+		printf("\tPart Number: ");
+		break;
+	case TLV_CODE_SERIAL_NUMBER:
+		printf("\tSerial Number: ");
+		break;
+	case TLV_CODE_MANUF_DATE:
+		printf("\tManufacturing Date: ");
+		break;
+	case TLV_CODE_DEVICE_VERSION:
+		printf("\tDevice Version: ");
+		break;
+	case TLV_CODE_PLATFORM_NAME:
+		printf("\tPlatform Name: ");
+		break;
+	case TLV_CODE_MAC_SIZE:
+		printf("\tMAC Size: ");
+		break;
+	case TLV_CODE_MANUF_NAME:
+		printf("\tManufacturer Name: ");
+		break;
+	case TLV_CODE_MANUF_COUNTRY:
+		printf("\tManufacturer Country: ");
+		break;
+	case TLV_CODE_VENDOR_NAME:
+		printf("\tVendor Name: ");
+		break;
+	case TLV_CODE_VENDOR_EXT:
+		printf("\tVendor Extension: ");
+		break;
+	case TLV_CODE_CRC_32:
+		printf("\tCRC32: ");
+		break;
+	default:
+		printf("\tUnknown type (%02x): ", type);
+		break;
+	}
+}
+
+static void print_general(struct tlv_field *field)
+{
+	uint8_t i, *ptr = (uint8_t *)&field->val;
+
+	for ( i = 0; i < field->len; i++) {
+		printf("%02x", *ptr++);
+		if ( i != 5)
+			printf(" ");
+	}
+	printf("\n");
+}
+
+static void print_string(struct tlv_field *field)
+{
+	uint8_t i, *ptr = (uint8_t *)&field->val;
+
+	for (i = 0; i < field->len; i++)
+		printf("%c", *ptr++);
+
+	printf("\n");
+
+}
+
+static void print_u16(struct tlv_field *field)
+{
+	if (field->len != 2) {
+		printf("Invalid value size, expected %u bytes, not %u\n", 2, field->len);
+		return;
+	}
+
+	printf("%u\n", __builtin_bswap16(((uint16_t *)field->val)[0]));
+}
+
+static void print_mac(struct tlv_field *field)
+{
+	uint8_t i, *ptr = (uint8_t *)&field->val;
+
+	if (field->len != 6) {
+		printf("Invalid MAC address, expected %u bytes, received %u\n", 6, field->len);
+		return;
+	}
+
+	for ( i = 0; i < 6; i++) {
+		printf("%02x", *ptr++);
+		if ( i != 5)
+			printf(":");
+	}
+
+	printf("\n");
+}
+
+static void print_field(struct tlv_field *field)
+{
+	print_type_name(field->type);
+
+	switch (field->type) {
+
+	case TLV_CODE_MAC_BASE:
+		print_mac(field);
+		break;
+
+	case TLV_CODE_PRODUCT_NAME:
+	case TLV_CODE_SERIAL_NUMBER:
+	case TLV_CODE_PLATFORM_NAME:
+	case TLV_CODE_MANUF_COUNTRY:
+	case TLV_CODE_VENDOR_NAME:
+	case TLV_CODE_MANUF_NAME:
+	case TLV_CODE_PART_NUMBER:
+		print_string(field);
+		break;
+
+	case TLV_CODE_MAC_SIZE:
+		print_u16(field);
+		break;
+
+	default:
+		print_general(field);
+		break;
+
+	}
+}
+
+void riic_tlv_print_eeprom(void)
+{
+	struct tlv_field *field;
+	__unused struct tlv_hdr *hdr;
+	uint16_t tot_len, offset;
+
+	printf("EEPROM Contents:\n");
+
+	hdr = GET_TLV_HDR();
+	offset = sizeof(struct tlv_hdr);
+	tot_len = GET_TLV_LEN() + offset;
+
+	for (;;) {
+		/* Get next field, read only the code and length */
+		field = GET_TLV_FIELD(offset);
+		print_field(field);
+		/* Move offset */
+		offset += 2 + field->len;
+
+		if (offset >= tot_len)
+			break;
+	}
+
+	printf("\n");
+}
diff --git a/plat/renesas/rz/common/include/riic_tlv.h b/plat/renesas/rz/common/include/riic_tlv.h
new file mode 100644
index 000000000..b633e0b44
--- /dev/null
+++ b/plat/renesas/rz/common/include/riic_tlv.h
@@ -0,0 +1,22 @@
+// SPDX-License-Identifier: BSD-4-Clause
+/*
+ * Copyright 2024 Josua Mayer <josua@solid-run.com>
+ */
+
+#define TLV_CODE_PRODUCT_NAME   0x21
+#define TLV_CODE_PART_NUMBER    0x22
+#define TLV_CODE_SERIAL_NUMBER  0x23
+#define TLV_CODE_MAC_BASE       0x24
+#define TLV_CODE_MANUF_DATE     0x25
+#define TLV_CODE_DEVICE_VERSION 0x26
+#define TLV_CODE_PLATFORM_NAME  0x28
+#define TLV_CODE_MAC_SIZE       0x2A
+#define TLV_CODE_MANUF_NAME     0x2B
+#define TLV_CODE_MANUF_COUNTRY  0x2C
+#define TLV_CODE_VENDOR_NAME    0x2D
+#define TLV_CODE_VENDOR_EXT     0xFD
+#define TLV_CODE_CRC_32	 	0xFE
+
+bool riic_tlv_read_eeprom(uint8_t chip, uint8_t offset);
+uint16_t riic_tlv_find(uint8_t code, uint8_t *output, uint16_t *offset_out);
+void riic_tlv_print_eeprom(void);
-- 
2.35.3

