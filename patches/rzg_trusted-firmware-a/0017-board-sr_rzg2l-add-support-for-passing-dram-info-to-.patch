From bdf331b64ec44e0493e2dd4f713329cb54204b34 Mon Sep 17 00:00:00 2001
From: Josua Mayer <josua@solid-run.com>
Date: Sat, 25 May 2024 14:33:55 +0200
Subject: [PATCH 17/17] board: sr_rzg2l: add support for passing dram info to
 BL3

Add support for two methods of passing dram info to BL3 (U-Boot):

1. DTB blob in arg1
2. DRAM start address and size in arg2 and arg3

U-Boot may use either information before relocation to make full  useof
available memory based on runtime detecion in ATF, and report correct
size to the operating system.

Both methods are disabled for now, to allow for further development and
testing.

Signed-off-by: Josua Mayer <josua@solid-run.com>
---
 plat/renesas/rz/board/sr_rzg2l/ddr_params.c | 60 +++++++++++++++++++++
 plat/renesas/rz/board/sr_rzg2l/rz_board.mk  |  8 +++
 2 files changed, 68 insertions(+)

diff --git a/plat/renesas/rz/board/sr_rzg2l/ddr_params.c b/plat/renesas/rz/board/sr_rzg2l/ddr_params.c
index 9ef605339..d133eac6d 100644
--- a/plat/renesas/rz/board/sr_rzg2l/ddr_params.c
+++ b/plat/renesas/rz/board/sr_rzg2l/ddr_params.c
@@ -9,11 +9,15 @@
 
 #include <cpg.h>
 #include <common/debug.h>
+#include <common/desc_image_load.h>
 #include <ddr_internal.h>
 #include <ddr_mc_regs.h>
+#include <libfdt.h>
 #include <pfc.h>
+#include <plat/common/common_def.h>
 #include <riic.h>
 #include <riic_tlv.h>
+#include <rz_private.h>
 
 /*
  * These structures are directly linked within ddr driver,
@@ -91,6 +95,10 @@ static void apply_T1bc(void)
 	memcpy(swizzle_phy_tbl, T1bc_swizzle_phy_tbl, sizeof(uint32_t) * SIZZLE_PHY_NUM * 2);
 }
 
+#if (defined(BL33_ARG1_FDTBLOB) && BL33_ARG1_FDTBLOB) || (defined(BL33_ARG23_DRAM_INFO) && BL33_ARG23_DRAM_INFO)
+static uint64_t dram_size;
+#endif
+
 void ddr_param_setup(void)
 {
 	bool status;
@@ -134,13 +142,65 @@ void ddr_param_setup(void)
 
 mem_default:
 mem_1g:
+#if (defined(BL33_ARG1_FDTBLOB) && BL33_ARG1_FDTBLOB) || (defined(BL33_ARG23_DRAM_INFO) && BL33_ARG23_DRAM_INFO)
+	dram_size = SZ_1G;
+#endif
 	apply_T1bc();
 	apply_C_011_D4_02_2();
 	NOTICE("memory settings: %s %s\n", "T1bc", "C-011_D4-02-2");
 	return;
 mem_2g:
+#if (defined(BL33_ARG1_FDTBLOB) && BL33_ARG1_FDTBLOB) || (defined(BL33_ARG23_DRAM_INFO) && BL33_ARG23_DRAM_INFO)
+	dram_size = SZ_2G;
+#endif
 	apply_T1bc();
 	apply_C_011_D4_01_1();
 	NOTICE("memory settings: %s %s\n", "T1bc", "C-011_D4-01-1");
 	return;
 }
+
+#if defined(BL33_ARG1_FDTBLOB) && BL33_ARG1_FDTBLOB
+int bl2_fdtblob_setup_dram(void *fdt)
+{
+	int node;
+	int ret = 0;
+
+	ret = fdt_setprop_string(fdt, 0, "compatible", "solidrun,rzg2l-sr-som");
+	if (ret)
+		NOTICE("setprop failed: %d\n", ret);
+
+
+	node = ret = fdt_add_subnode(fdt, 0, "memory@48000000");
+	if (ret < 0)
+		return ret;
+
+	ret = fdt_setprop_string(fdt, node, "device_type", "memory");
+	if (ret < 0)
+		return ret;
+
+	/* dram memory starts at 1G, but first 128MB are reserved */
+	ret = fdt_setprop_u64(fdt, node, "reg", SZ_1G + SZ_128M);
+	if (ret < 0)
+		return ret;
+
+	/* expose only non-reserved size */
+	ret = fdt_appendprop_u64(fdt, node, "reg", dram_size - SZ_128M);
+	if (ret < 0)
+		return ret;
+
+	return ret;
+}
+#endif
+
+#if defined(BL33_ARG23_DRAM_INFO) && BL33_ARG23_DRAM_INFO
+int bl3_params_setup(unsigned int image_id, bl2_to_bl31_params_mem_t *params)
+{
+	if (image_id == BL33_IMAGE_ID) {
+		/* expose only non-reserved area */
+		params->bl33_ep_info.args.arg2 = SZ_1G + SZ_128M;
+		params->bl33_ep_info.args.arg3 = dram_size - SZ_128M;
+	}
+
+	return 0;
+}
+#endif
diff --git a/plat/renesas/rz/board/sr_rzg2l/rz_board.mk b/plat/renesas/rz/board/sr_rzg2l/rz_board.mk
index a553b5c3e..696dc88f7 100644
--- a/plat/renesas/rz/board/sr_rzg2l/rz_board.mk
+++ b/plat/renesas/rz/board/sr_rzg2l/rz_board.mk
@@ -18,3 +18,11 @@ $(eval $(call add_define,DDR_PARAM_SETUP))
 
 DDR_PLL4    := 1600
 $(eval $(call add_define,DDR_PLL4))
+
+BL33_ARG1_FDTBLOB := 0
+$(eval $(call add_define,BL33_ARG1_FDTBLOB))
+include lib/libfdt/libfdt.mk
+
+BL33_ARG23_DRAM_INFO := 0
+$(eval $(call add_define,BL33_ARG23_DRAM_INFO))
+include lib/libfdt/libfdt.mk
-- 
2.35.3

