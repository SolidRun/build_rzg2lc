From c165c0ae54f15e2d045097b0d547e8fd9665eb18 Mon Sep 17 00:00:00 2001
From: Josua Mayer <josua@solid-run.com>
Date: Tue, 21 May 2024 11:43:22 +0200
Subject: [PATCH 09/10] import rz-g3s i2c driver from v2.7/rzg3s

https://github.com/renesas-rz/rzg_trusted-firmware-a/blob/v2.7/rzg3s/plat/renesas/rz/soc/g3s/drivers/riic.c

Signed-off-by: Josua Mayer <josua@solid-run.com>
---
 plat/renesas/rz/soc/g3s/drivers/riic.c      | 357 ++++++++++++++++++++
 plat/renesas/rz/soc/g3s/include/riic.h      |  14 +
 plat/renesas/rz/soc/g3s/include/riic_regs.h | 130 +++++++
 3 files changed, 501 insertions(+)
 create mode 100644 plat/renesas/rz/soc/g3s/drivers/riic.c
 create mode 100644 plat/renesas/rz/soc/g3s/include/riic.h
 create mode 100644 plat/renesas/rz/soc/g3s/include/riic_regs.h

diff --git a/plat/renesas/rz/soc/g3s/drivers/riic.c b/plat/renesas/rz/soc/g3s/drivers/riic.c
new file mode 100644
index 000000000..ac5e53f9e
--- /dev/null
+++ b/plat/renesas/rz/soc/g3s/drivers/riic.c
@@ -0,0 +1,357 @@
+/*
+ * Copyright (c) 2022, Renesas Electronics Corporation. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#include <stdint.h>
+#include <stddef.h>
+#include <assert.h>
+#include <lib/mmio.h>
+#include <rz_soc_def.h>
+#include <riic.h>
+#include <riic_regs.h>
+
+#define RIIC_SPEED_RATE			(100000)
+#define RIIC_WAIT_COUNT_MAX		(40000000U)
+
+static void riic_clear_bit(uint8_t val, uintptr_t offset)
+{
+	mmio_write_8(offset, mmio_read_8(offset) & ~val);
+}
+
+static void riic_set_bit(uint8_t val, uint32_t offset)
+{
+	mmio_write_8(offset, mmio_read_8(offset) | val);
+}
+
+static int riic_set_clock(int clock)
+{
+	switch (clock) {
+	case 100000:
+		riic_clear_bit(ICFER_FMPE, RIIC_ICFER);
+		riic_set_bit(ICFER_SCLE | ICFER_NFE, RIIC_ICFER);
+		riic_clear_bit(ICMR3_NF_MASK, RIIC_ICMR3);
+		riic_set_bit(ICMR3_NF_FOUR, RIIC_ICMR3);
+		riic_clear_bit(ICMR1_CKS_MASK, RIIC_ICMR1);
+		riic_set_bit(ICMR1_CKS(4), RIIC_ICMR1);
+		mmio_write_8(RIIC_ICBRH, ICBRH_RESERVED | 24);
+		mmio_write_8(RIIC_ICBRL, ICBRL_RESERVED | 27);
+		break;
+	case 400000:
+		riic_clear_bit(ICFER_FMPE, RIIC_ICFER);
+		riic_set_bit(ICFER_SCLE | ICFER_NFE, RIIC_ICFER);
+		riic_clear_bit(ICMR3_NF_MASK, RIIC_ICMR3);
+		riic_set_bit(ICMR3_NF_FOUR, RIIC_ICMR3);
+		riic_clear_bit(ICMR1_CKS_MASK, RIIC_ICMR1);
+		riic_set_bit(ICMR1_CKS(2), RIIC_ICMR1);
+		mmio_write_8(RIIC_ICBRH, ICBRH_RESERVED | 25);
+		mmio_write_8(RIIC_ICBRL, ICBRL_RESERVED | 26);
+		break;
+	case 1000000:
+		riic_set_bit(ICFER_FMPE, RIIC_ICFER);
+		riic_set_bit(ICFER_SCLE | ICFER_NFE, RIIC_ICFER);
+		riic_clear_bit(ICMR3_NF_MASK, RIIC_ICMR3);
+		riic_set_bit(ICMR3_NF_FOUR, RIIC_ICMR3);
+		riic_clear_bit(ICMR1_CKS_MASK, RIIC_ICMR1);
+		riic_set_bit(ICMR1_CKS(1), RIIC_ICMR1);
+		mmio_write_8(RIIC_ICBRH, ICBRH_RESERVED | 14);
+		mmio_write_8(RIIC_ICBRL, ICBRL_RESERVED | 24);
+		break;
+
+	default:
+		ERROR("%s: unsupported clock (%dHz)\n", __func__, clock);
+		return -1;
+	}
+
+	return 0;
+}
+
+static int riic_init_setting(int clock)
+{
+	int ret;
+
+	riic_clear_bit(ICCR1_ICE, RIIC_ICCR1);
+
+	riic_set_bit(ICCR1_IICRST, RIIC_ICCR1);
+
+	riic_clear_bit(ICCR1_IICRST, RIIC_ICCR1);
+
+	ret = (int)mmio_read_8(RIIC_ICCR1);
+
+	mmio_write_8(RIIC_ICSER, ICSER_SAR0E);
+
+	mmio_write_8(RIIC_ICMR1, ICMR1_BC(7));
+
+	ret = mmio_read_8(RIIC_ICMR1);
+
+	ret = riic_set_clock(clock);
+	if (ret < 0)
+		return ret;
+
+	riic_set_bit(ICCR1_ICE, RIIC_ICCR1);	/* Enable RIIC */
+
+	riic_set_bit(ICMR3_RDRFS | ICMR3_WAIT | ICMR3_ACKWP, RIIC_ICMR3);
+
+	ret = mmio_read_8(RIIC_ICMR3);
+
+	return 0;
+}
+
+static int riic_check_busy(void)
+{
+	uint8_t icsr2;
+	uint32_t loop_cnt = 0;
+
+	do {
+		icsr2 = mmio_read_8(RIIC_ICCR2);
+		if (0 == (icsr2 & ICCR2_BBSY))
+			return 0;
+	} while (loop_cnt++ < RIIC_WAIT_COUNT_MAX);
+
+	ERROR("%s: i2c bus is busy.\n", __func__);
+	return -1;
+}
+
+static int riic_wait_for_icsr2(uint8_t bit)
+{
+	uint8_t icsr2;
+	uint32_t loop_cnt = 0;
+
+	do {
+		icsr2 = mmio_read_8(RIIC_ICSR2);
+
+		if (0 != (icsr2 & ICSR2_NACKF))
+			return -1;
+		if (0 != (icsr2 & bit))
+			return 0;
+	} while (loop_cnt++ < RIIC_WAIT_COUNT_MAX);
+
+	ERROR("%s: timeout!(bit = %x icsr2 = %x, iccr2 = %x)\n", __func__,
+		bit, mmio_read_8(RIIC_ICSR2), mmio_read_8(RIIC_ICCR2));
+
+	return -1;
+}
+
+static int riic_check_nack_receive(void)
+{
+	if (0 != (mmio_read_8(RIIC_ICSR2) & ICSR2_NACKF)) {
+		/* received NACK */
+		riic_clear_bit(ICSR2_NACKF, RIIC_ICSR2);
+		riic_set_bit(ICCR2_SP, RIIC_ICCR2);
+		mmio_read_8(RIIC_ICDRR);	/* dummy read */
+		return -1;
+	}
+	return 0;
+}
+
+static void riic_set_receive_ack(int ack)
+{
+
+	if (ack)
+		riic_clear_bit(ICMR3_ACKBT, RIIC_ICMR3);
+	else
+		riic_set_bit(ICMR3_ACKBT, RIIC_ICMR3);
+}
+
+static int riic_i2c_raw_write(uint8_t *buf, int len)
+{
+	int ret = 0;
+	int index = 0;
+
+	for (index = 0; index < len; index++) {
+		ret = riic_check_nack_receive();
+		if (ret < 0)
+			return ret;
+
+		ret = riic_wait_for_icsr2(ICSR2_TDRE);
+		if (ret < 0)
+			return ret;
+
+		mmio_write_8(RIIC_ICDRT, buf[index]);
+	}
+
+	return ret;
+}
+
+static int riic_i2c_raw_read(uint8_t *buf, uint32_t len)
+{
+	int dummy_read = 1;
+	int ret = 0;
+	int index = 0;
+
+	do {
+		ret = riic_wait_for_icsr2(ICSR2_RDRF);
+		if (ret < 0)
+			return ret;
+
+		buf[index] = mmio_read_8(RIIC_ICDRR);
+		if (dummy_read)
+			dummy_read = 0;
+		else
+			index++;
+		riic_set_receive_ack(1);
+	} while (index < (len - 1));
+
+	ret = riic_wait_for_icsr2(ICSR2_RDRF);
+	if (ret < 0)
+		return ret;
+
+	riic_clear_bit(ICSR2_STOP, RIIC_ICSR2);
+
+	riic_set_bit(ICCR2_SP, RIIC_ICCR2);
+
+	buf[index++] = mmio_read_8(RIIC_ICDRR);
+
+	riic_set_receive_ack(0);
+
+	return ret;
+}
+
+static int riic_send_mem_addr(uint32_t addr, int alen)
+{
+	int i;
+	uint8_t buf[4];
+
+	if (alen > 4 || alen <= 0)
+		return -1;
+
+	for (i = alen - 1; i >= 0; i--, addr >>= 8)
+		buf[i] = addr & 0xff;
+
+	return riic_i2c_raw_write(buf, alen);
+}
+
+static int riic_send_start_cond(int restart)
+{
+	int ret;
+
+	if (restart)
+		mmio_write_8(RIIC_ICCR2, mmio_read_8(RIIC_ICCR2) | ICCR2_RS);
+	else
+		mmio_write_8(RIIC_ICCR2, mmio_read_8(RIIC_ICCR2) | ICCR2_ST);
+
+	ret = riic_wait_for_icsr2(ICSR2_START);
+	if (ret < 0)
+		return ret;
+
+	riic_clear_bit(ICSR2_START, RIIC_ICSR2);
+
+	return ret;
+}
+
+static int riic_send_stop_cond(void)
+{
+	int ret;
+
+	riic_clear_bit(ICSR2_STOP | ICSR2_NACKF, RIIC_ICSR2);
+	riic_set_bit(ICCR2_SP, RIIC_ICCR2);
+
+	ret = riic_wait_for_icsr2(ICSR2_STOP);
+	if (ret < 0)
+		return ret;
+
+	riic_clear_bit(ICSR2_STOP | ICSR2_NACKF, RIIC_ICSR2);
+	return ret;
+}
+
+static int riic_send_dev_addr(uint8_t addr, int read)
+{
+	uint8_t buf = ((addr << 1) | read);
+
+	return riic_i2c_raw_write(&buf, 1);
+}
+
+void riic_setup(void)
+{
+	int ret;
+
+	ret = riic_init_setting(RIIC_SPEED_RATE);
+	if (ret)
+		panic();
+}
+
+int32_t riic_write(uint8_t slave, uint8_t addr, uint8_t data)
+{
+	int ret;
+
+	ret = riic_check_busy();
+	if (ret < 0)
+		return ret;
+
+	ret = riic_send_start_cond(0);
+	if (ret < 0)
+		goto force_exit;
+
+	/* send addr */
+	ret = riic_send_dev_addr(slave, 0);
+	if (ret < 0)
+		goto force_exit;
+
+	ret = riic_send_mem_addr(addr, 1);
+	if (ret < 0)
+		goto force_exit;
+
+	/* transmit data */
+	ret = riic_i2c_raw_write(&data, 1);
+	if (ret < 0)
+		goto force_exit;
+
+	ret = riic_wait_for_icsr2(ICSR2_TEND);
+
+force_exit:
+	riic_send_stop_cond();
+
+	return ret;
+}
+
+int32_t riic_read(uint8_t slave, uint8_t addr, uint8_t *data)
+{
+	int ret;
+
+	ret = riic_check_busy();
+	if (ret < 0)
+		return ret;
+
+	ret = riic_send_start_cond(0);
+	if (ret < 0)
+		goto force_exit;
+
+	/* send addr */
+	ret = riic_send_dev_addr(slave, 0);
+	if (ret < 0)
+		goto force_exit;
+
+	ret = riic_send_mem_addr(addr, 1);
+	if (ret < 0)
+		goto force_exit;
+
+	ret = riic_wait_for_icsr2(ICSR2_TEND);
+	if (ret < 0)
+		goto force_exit;
+
+	/* restart */
+	ret = riic_send_start_cond(1);
+	if (ret < 0)
+		goto force_exit;
+
+	ret = riic_send_dev_addr(slave, 1);
+	if (ret < 0)
+		goto force_exit;
+
+	ret = riic_wait_for_icsr2(ICSR2_RDRF);
+	if (ret < 0)
+		goto force_exit;
+
+	ret = riic_check_nack_receive();
+	if (ret < 0)
+		goto force_exit;
+
+	/* receive data */
+	ret = riic_i2c_raw_read(data, 1);
+
+force_exit:
+	riic_send_stop_cond();
+
+	return ret;
+}
diff --git a/plat/renesas/rz/soc/g3s/include/riic.h b/plat/renesas/rz/soc/g3s/include/riic.h
new file mode 100644
index 000000000..5cb26b37c
--- /dev/null
+++ b/plat/renesas/rz/soc/g3s/include/riic.h
@@ -0,0 +1,14 @@
+/*
+ * Copyright (c) 2022, Renesas Electronics Corporation. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#ifndef RIIC_H
+#define RIIC_H
+
+void riic_setup(void);
+int32_t riic_write(uint8_t slave, uint8_t addr, uint8_t data);
+int32_t riic_read(uint8_t slave, uint8_t addr, uint8_t *data);
+
+#endif /* RIIC_H */
diff --git a/plat/renesas/rz/soc/g3s/include/riic_regs.h b/plat/renesas/rz/soc/g3s/include/riic_regs.h
new file mode 100644
index 000000000..60a7eb657
--- /dev/null
+++ b/plat/renesas/rz/soc/g3s/include/riic_regs.h
@@ -0,0 +1,130 @@
+/*
+ * Copyright (c) 2022, Renesas Electronics Corporation. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#ifndef RIIC_REGS_H
+#define RIIC_REGS_H
+
+#define RIIC_BASE		(RZ_SOC_I2C_BASE)
+
+#define RIIC_ICCR1		((uintptr_t)RIIC_BASE + 0x00)
+#define RIIC_ICCR2		((uintptr_t)RIIC_BASE + 0x01)
+#define RIIC_ICMR1		((uintptr_t)RIIC_BASE + 0x02)
+#define RIIC_ICMR2		((uintptr_t)RIIC_BASE + 0x03)
+#define RIIC_ICMR3		((uintptr_t)RIIC_BASE + 0x04)
+#define RIIC_ICFER		((uintptr_t)RIIC_BASE + 0x05)
+#define RIIC_ICSER		((uintptr_t)RIIC_BASE + 0x06)
+#define RIIC_ICIER		((uintptr_t)RIIC_BASE + 0x07)
+#define RIIC_ICSR1		((uintptr_t)RIIC_BASE + 0x08)
+#define RIIC_ICSR2		((uintptr_t)RIIC_BASE + 0x09)
+#define RIIC_ICSAR0		((uintptr_t)RIIC_BASE + 0x0A)
+#define RIIC_ICBRL		((uintptr_t)RIIC_BASE + 0x10)
+#define RIIC_ICBRH		((uintptr_t)RIIC_BASE + 0x11)
+#define RIIC_ICDRT		((uintptr_t)RIIC_BASE + 0x12)
+#define RIIC_ICDRR		((uintptr_t)RIIC_BASE + 0x13)
+
+
+/* ICCR1 */
+#define ICCR1_ICE		(0x80)
+#define ICCR1_IICRST	(0x40)
+#define ICCR1_CLO		(0x20)
+#define ICCR1_SOWP		(0x10)
+#define ICCR1_SCLO		(0x08)
+#define ICCR1_SDAO		(0x04)
+#define ICCR1_SCLI		(0x02)
+#define ICCR1_SDAI		(0x01)
+
+/* ICCR2 */
+#define ICCR2_BBSY		(0x80)
+#define ICCR2_MST		(0x40)
+#define ICCR2_TRS		(0x20)
+#define ICCR2_SP		(0x08)
+#define ICCR2_RS		(0x04)
+#define ICCR2_ST		(0x02)
+
+/* ICMR1 */
+#define ICMR1_MTWP		(0x80)
+#define ICMR1_CKS_MASK	(0x70)
+#define ICMR1_BCWP		(0x08)
+#define ICMR1_BC_MASK	(0x07)
+
+#define ICMR1_CKS(_x)	((_x << 4) & ICMR1_CKS_MASK)
+#define ICMR1_BC(_x)	(_x & ICMR1_BC_MASK)
+
+/* ICMR2 */
+#define ICMR2_DLCS		(0x80)
+#define ICMR2_SDDL_MASK	(0x70)
+#define ICMR2_TMOH		(0x04)
+#define ICMR2_TMOL		(0x02)
+#define ICMR2_TMOS		(0x01)
+
+/* ICMR3 */
+#define ICMR3_SMBS		(0x80)
+#define ICMR3_WAIT		(0x40)
+#define ICMR3_RDRFS		(0x20)
+#define ICMR3_ACKWP		(0x10)
+#define ICMR3_ACKBT		(0x08)
+#define ICMR3_ACKBR		(0x04)
+#define ICMR3_NF_MASK	(0x03)
+#define ICMR3_NF_ONE	(0x00)
+#define ICMR3_NF_TWO	(0x01)
+#define ICMR3_NF_THREE	(0x02)
+#define ICMR3_NF_FOUR	(0x03)
+
+/* ICFER */
+#define ICFER_FMPE		(0x80)
+#define ICFER_SCLE		(0x40)
+#define ICFER_NFE		(0x20)
+#define ICFER_NACKE		(0x10)
+#define ICFER_SALE		(0x08)
+#define ICFER_NALE		(0x04)
+#define ICFER_MALE		(0x02)
+#define ICFER_TMOE		(0x01)
+
+/* ICSER */
+#define ICSER_HOAE		(0x80)
+#define ICSER_DIDE		(0x20)
+#define ICSER_GCAE		(0x08)
+#define ICSER_SAR2E		(0x04)
+#define ICSER_SAR1E		(0x02)
+#define ICSER_SAR0E		(0x01)
+
+/* ICIER */
+#define ICIER_TIE		(0x80)
+#define ICIER_TEIE		(0x40)
+#define ICIER_RIE		(0x20)
+#define ICIER_NAKIE		(0x10)
+#define ICIER_SPIE		(0x08)
+#define ICIER_STIE		(0x04)
+#define ICIER_ALIE		(0x02)
+#define ICIER_TMOIE		(0x01)
+
+/* ICSR1 */
+#define ICSR1_HOA		(0x80)
+#define ICSR1_DID		(0x20)
+#define ICSR1_GCA		(0x08)
+#define ICSR1_AAS2		(0x04)
+#define ICSR1_AAS1		(0x02)
+#define ICSR1_AAS0		(0x01)
+
+/* ICSR2 */
+#define ICSR2_TDRE		(0x80)
+#define ICSR2_TEND		(0x40)
+#define ICSR2_RDRF		(0x20)
+#define ICSR2_NACKF		(0x10)
+#define ICSR2_STOP		(0x08)
+#define ICSR2_START		(0x04)
+#define ICSR2_AL		(0x02)
+#define ICSR2_TMOF		(0x01)
+
+/* ICBRH */
+#define ICBRH_RESERVED	(0xe0)	/* The write value should always be 1 */
+#define ICBRH_BRH_MASK	(0x1f)
+
+/* ICBRL */
+#define ICBRL_RESERVED	(0xe0)	/* The write value should always be 1 */
+#define ICBRL_BRL_MASK	(0x1f)
+
+#endif /* RIIC_REGS_H */
-- 
2.35.3

