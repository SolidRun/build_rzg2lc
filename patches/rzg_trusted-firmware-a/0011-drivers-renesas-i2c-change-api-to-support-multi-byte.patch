From 02d3dbb12c09cf9e123f331e38dbf5bf131624d9 Mon Sep 17 00:00:00 2001
From: Josua Mayer <josua@solid-run.com>
Date: Wed, 22 May 2024 18:41:59 +0200
Subject: [PATCH 11/12] drivers: renesas: i2c: change api to support multi-byte
 read/write

Extend riic_read/write with a length argument so it can support a
buffer. The implementation is left unchanged, multi-byte transactions
are executed as single-byte transactions in a loop.

Signed-off-by: Josua Mayer <josua@solid-run.com>
---
 plat/renesas/rz/common/drivers/riic.c | 40 ++++++++++++++++++++++-----
 plat/renesas/rz/common/include/riic.h |  4 +--
 2 files changed, 35 insertions(+), 9 deletions(-)

diff --git a/plat/renesas/rz/common/drivers/riic.c b/plat/renesas/rz/common/drivers/riic.c
index 52cfdf71d..55497e17d 100644
--- a/plat/renesas/rz/common/drivers/riic.c
+++ b/plat/renesas/rz/common/drivers/riic.c
@@ -274,7 +274,7 @@ void riic_setup(uintptr_t i2c_base)
 		panic();
 }
 
-int32_t riic_write(uint8_t slave, uint8_t addr, uint8_t data)
+static inline int32_t riic_write_one(uint8_t slave, uint8_t addr, uint8_t data)
 {
 	int ret;
 
@@ -308,7 +308,21 @@ force_exit:
 	return ret;
 }
 
-int32_t riic_read(uint8_t slave, uint8_t addr, uint8_t *data)
+int32_t riic_write(uint8_t slave, uint8_t addr, uint8_t *data, int length)
+{
+	int i;
+	int ret = 0;
+
+	for (i = 0; i < length; i++) {
+		ret = riic_write_one(slave, addr + i, data[i]);
+		if (ret)
+			return ret;
+	}
+
+	return ret;
+}
+
+static inline int32_t riic_read_one(uint8_t slave, uint8_t addr, uint8_t *data)
 {
 	int ret;
 
@@ -359,6 +373,20 @@ force_exit:
 	return ret;
 }
 
+int32_t riic_read(uint8_t slave, uint8_t addr, uint8_t *data, int length)
+{
+	int i;
+	int ret = 0;
+
+	for (i = 0; i < length; i++) {
+		ret = riic_read_one(slave, addr + i, &data[i]);
+		if (ret)
+			return ret;
+	}
+
+	return ret;
+}
+
 static inline char _digit2hex(const uint8_t digit)
 {
 	if (digit < 0xa)
@@ -373,11 +401,9 @@ int riic_dump(uint8_t slave, uint8_t addr, uint8_t *data, int length)
 	int i, j, k;
 	uint8_t row[16];
 
-	for (i = 0; i < length; i++) {
-		ret = riic_read(slave, addr + i, &data[i]);
-		if (ret)
-			return ret;
-	}
+	ret = riic_read(slave, addr, data, length);
+	if (ret)
+		return ret;
 
 	for (i = 0; i < length; i++) {
 		j = i % 16;
diff --git a/plat/renesas/rz/common/include/riic.h b/plat/renesas/rz/common/include/riic.h
index 1c47c1c91..6c1e6188c 100644
--- a/plat/renesas/rz/common/include/riic.h
+++ b/plat/renesas/rz/common/include/riic.h
@@ -8,8 +8,8 @@
 #define RIIC_H
 
 void riic_setup(uintptr_t i2c_base);
-int32_t riic_write(uint8_t slave, uint8_t addr, uint8_t data);
-int32_t riic_read(uint8_t slave, uint8_t addr, uint8_t *data);
+int32_t riic_write(uint8_t slave, uint8_t addr, uint8_t *data, int length);
+int32_t riic_read(uint8_t slave, uint8_t addr, uint8_t *data, int length);
 int riic_dump(uint8_t slave, uint8_t addr, uint8_t *data, int length);
 
 #endif /* RIIC_H */
-- 
2.35.3

